fn fibonacci(n: u64) -> u64 {
	let ~first = 1;
	let ~second = 1;

	let ~counter = 1;
	loop counter == 1 => counter == n {
		let summation = first + second;
		first <=> second;
		second <=> summation;

		// `summation` contains the original `first`
		drop summation = second - first;
		counter += 1;
	}

	// Implicit drop of `first` and `counter`
	drop n = counter;
	second
}

fn main() -> u64 {
	let result = fibonacci(35);
	let _trace_result = trace(result);
	result
}
