module vector

use crate::vector::vector::*

fn main() -> u64:
	let test: u64 = 3
	#collapse((1337, test))

fn fibonacci(n: u64) -> u64:
	let ~first = 1
	let ~second = 1

	let ~counter = 1
	loop counter == 1 => counter == n:
		let summation = first + second
		first <=> second
		second <=> summation

		drop summation = second - first
		counter += 1

	drop n = second
	second

fn fibonacci_recursive(n: u64) -> u64:
	if:
		n <= 1 => n <= 1: 1
		true => true:
			let left = fibonacci_recursive(n - 2)
			let right = fibonacci_recursive(n - 1)
			left + right

fn summation(n: u64) -> u64:
	let ~counter = 1
	let ~summation = 0
	loop => counter == n + 1:
		summation += counter
		counter += 1
	summation

fn collapse((a, b): (u64, u64)) -> u64:
	a * b

fn absolute_value(x: i32) -> i32:
	if x < 0: x = -x
	x
